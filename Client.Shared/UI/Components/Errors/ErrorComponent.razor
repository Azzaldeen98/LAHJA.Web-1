@using Microsoft.JSInterop
@using MudBlazor
@inherits LayoutComponentBase
@inject NavigationManager Navigation
<style>
    .floating {
    animation: float 6s ease-in-out infinite;
    }

    .pulse {
    animation: pulse 2s ease-in-out infinite;
    }

    .fade-in {
    animation: fadeIn 0.8s ease-out forwards;
    }

    .delay-1 {
    animation-delay: 0.2s;
    }

    .delay-2 {
    animation-delay: 0.4s;
    }

    .delay-3 {
    animation-delay: 0.6s;
    }

    .delay-4 {
    animation-delay: 0.8s;
    }

    .glow {
    box-shadow: 0 0 15px rgba(59, 130, 246, 0.5);
    }

    .bg-gradient-error {
    background: linear-gradient(135deg, #f43f5e 0%, #8b5cf6 100%);
    }
</style>





<MudPaper Class="d-flex flex-column align-center justify-center min-h-screen p-4"
Style="background-color: #f3f4f6; font-family: 'Segoe UI', sans-serif;">
    <MudPaper Elevation="6" Class="max-w-4xl w-100 rounded-xl overflow-hidden" Style="transition: transform 0.5s;">

        <!-- Error Header -->
        <MudPaper Class="p-8 text-white text-center position-relative"
        Style="background: linear-gradient(135deg, #f43f5e 0%, #8b5cf6 100%);">
            <MudIcon Icon="@ErrorIcon" Size="Size.Large" Class="mb-4"
            Style="font-size: 3rem; background: rgba(255,255,255,0.2); padding: 1rem; border-radius: 50%; backdrop-filter: blur(5px); animation: float 6s ease-in-out infinite;" />

            <MudText Typo="Typo.h4" Class="mb-2">@Message</MudText>
            <MudText Typo="Typo.h6" Class="mb-4" Style="opacity: 0.9">@Declare</MudText>
        </MudPaper>

        <!-- Content Section -->
        <MudContainer Class="p-8">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.h6" Class="mb-2 text-blue">ماذا حدث؟</MudText>
                    <MudText Class="mb-4 text-secondary">@Description</MudText>

                    <MudText Typo="Typo.h6" Class="mb-2 text-yellow">ما يمكنك فعله</MudText>
                    <MudList Dense="true" T="string">
                        @if (ShowRefresh)
                        {
                            <MudListItem>
                                <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="mr-2 text-blue" />
                                <MudButton Variant="Variant.Text" OnClick="@Reload">تحديث الصفحة</MudButton>
                            </MudListItem>
                        }

                        @if (ShowHome)
                        {
                            <MudListItem>
                                <MudIcon Icon="@Icons.Material.Filled.Home" Class="mr-2 text-green" />
                                <MudLink Href="/">العودة إلى الصفحة الرئيسية</MudLink>
                            </MudListItem>
                        }

                        @if (ShowBack)
                        {
                            <MudListItem>
                                <MudIcon Icon="@Icons.Material.Filled.History" Class="mr-2 text-purple" />
                                <MudButton Variant="Variant.Text" OnClick="@GoBack">رجوع</MudButton>
                            </MudListItem>
                        }
                    </MudList>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudPaper Class="bg-grey-lighten-4 p-6 border rounded-xl">
                        <MudText Typo="Typo.h6" Align="Align.Center">هل تحتاج مساعدة؟</MudText>
                        <MudText Typo="Typo.body2" Align="Align.Center" Class="mb-4">@SupportMessage</MudText>

                        <MudStack Spacing="2">
                            @if (OnSupportClick.HasDelegate){
                                <MudButton Color="Color.Primary" Variant="Variant.Filled"
                                StartIcon="@Icons.Material.Filled.Headset"
                                FullWidth OnClick="@OnSupportClick">التواصل مع الدعم الفني</MudButton>
                            }

                            @if (OnEmailClick.HasDelegate){
                                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Email"
                                FullWidth OnClick="@OnEmailClick">إرسال بريد إلكتروني</MudButton>
                            }

                            @if (OnReportClick.HasDelegate){
                                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.BugReport"
                                FullWidth OnClick="@OnReportClick">الإبلاغ عن المشكلة</MudButton>
                            }
                        </MudStack>

                        <MudDivider Class="my-4" />
                        <MudText Typo="Typo.subtitle2" Align="Align.Center">أو تواصل معنا عبر</MudText>
                        <MudStack Direction="Row" Justify="Justify.Center" Spacing="2" Class="mt-2">
                            @ChildContent
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>

        <!-- Footer -->
        <MudDivider />
        <MudText Align="Align.Center" Class="py-3 text-secondary text-sm">رمز الخطأ: #ERR-@_randomErrorCode</MudText>
    </MudPaper>

    <MudText Align="Align.Center" Class="mt-4 text-secondary">© 2025 . جميع الحقوق محفوظة.</MudText>
</MudPaper>

@code {
    [Parameter] public string Message { get; set; } = "عذرًا! حدث خطأ غير متوقع";
    [Parameter] public string Declare { get; set; } = "نحن نعمل على إصلاح المشكلة في أسرع وقت ممكن";
    [Parameter] public string Description { get; set; } = "واجه النظام خطأ غير متوقع أثناء معالجة طلبك.";
    [Parameter] public string SupportMessage { get; set; } = "فريق الدعم لدينا جاهز لمساعدتك.";
    [Parameter] public string ErrorIcon { get; set; } = Icons.Material.Filled.Warning;

    [Parameter] public bool ShowRefresh { get; set; } = true;
    [Parameter] public bool ShowHome { get; set; } = true;
    [Parameter] public bool ShowBack { get; set; } = true;

    [Parameter] public EventCallback OnSupportClick { get; set; } 
    [Parameter] public EventCallback OnEmailClick { get; set; }
    [Parameter] public EventCallback OnReportClick { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }

    private int _randomErrorCode = new Random().Next(1000, 9999);


    private void Reload() =>  Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    private void GoBack() => JS.InvokeVoidAsync("history.back");

    [Inject] private IJSRuntime JS { get; set; } = default!;
}



