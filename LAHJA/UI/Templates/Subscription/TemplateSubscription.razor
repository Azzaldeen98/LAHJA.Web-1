@using Domain.ShareData
@using Domain.ShareData.Base
@using LAHAJ.Loading
@using LAHJA.ContextServices
@using LAHJA.Data.UI.Components
@using LAHJA.Data.UI.Components.Plan
@using LAHJA.Data.UI.Components.Subscription
@using LAHJA.Data.UI.Models.Profile
@using LAHJA.Helpers.Services
@using LAHJA.UI.Components.General.Skeleton
@using LAHJA.UI.Components.Plan
@using LAHJA.UI.Components.ProFile.Settings
@using LAHJA.UI.Components.Subscription
@inject LAHJA.Data.UI.Templates.Subscriptions.TemplateSubscription Template
@inject LAHJA.Data.UI.Templates.Plans.TemplatePlans TemplatePlan

@inherits AppUtilityComponent


@if (isLoading)
{
	<LoadingComponent />

}
else
{
	<MainSubscription 
			BuildSubscriptionData="buildSubscriptionData" 
			BuildPlanData="buildPlanData" 
			SubmitCancel="onCancelSubscription"
			SubmitPause="onPauseSubscription"
			SubmitResume="onResumeSubscription" />






}


@code {


	[Parameter] public string PlanId { get; set; } = "";
	[Parameter] public string SubscriptionId { get; set; } = "";
	private bool isLoading =true;

	private DataBuildUserSubscriptionInfo buildSubscriptionData;
	private PlanViewModel buildPlanData;

	protected override async Task OnInitializedAsync()
	{

		await loadingSubscriptionAsync();
		await loadingPlanAsync();
		isLoading = false;
		StateHasChanged();
	}

	private async Task loadingSubscriptionAsync()
	{
		if (Template.BuilderComponents.GetSubscription != null && !string.IsNullOrEmpty(SubscriptionId))
		{

			var result = await Template.BuilderComponents.GetSubscription(SubscriptionId);

			if (result.Succeeded)
			{
				buildSubscriptionData = result.Data;

			}

		}
	}
	private async Task loadingPlanAsync()
	{
		if (TemplatePlan != null && !string.IsNullOrEmpty(PlanId))
		{
			var result = await TemplatePlan.BuilderComponentsQuery.GetPlanById(new DataBuildPlansBase { PlanId = PlanId, Lg = lg });

			if (result.Succeeded)
			{
				buildPlanData = result.Data;

			}

		}
	}

	private void onCancelSubscription(DataBuildUserSubscriptionInfo subscription)
	{
		if (Template.BuilderComponents.SubmitCancel!=null)
		{
			Template.BuilderComponents.SubmitCancel(subscription);
		
		}
	}
	private void onResumeSubscription(DataBuildUserSubscriptionInfo subscription)
	{
		if (Template.BuilderComponents.SubmitResume != null)
		{
			Template.BuilderComponents.SubmitResume(subscription);

		}
	}
	private void onPauseSubscription(DataBuildUserSubscriptionInfo subscription)
	{
		if (Template.BuilderComponents.SubmitPause != null)
		{
			Template.BuilderComponents.SubmitPause(subscription);

		}
	}

	

} 