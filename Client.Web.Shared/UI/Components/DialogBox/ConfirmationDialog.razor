@using MudBlazor
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6">@ContentText</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="@Color" OnClick="@(() => MudDialog.Close(DialogResult.Ok(true)))">@ButtonText</MudButton>
        <MudButton OnClick="@(() => MudDialog.Cancel())">@CancelButtonText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public string ContentText { get; set; } = string.Empty;
    [Parameter] public string ButtonText { get; set; } = "Yes";
    [Parameter] public string CancelButtonText { get; set; } = "No";
    [Parameter] public Color Color { get; set; } = Color.Primary;
}


@*  @inject UserPromptService PromptService


 @if (IsVisible)
 {
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">تأكيد</h5>
                    <button type="button" class="btn-close" aria-label="Close" onclick="()=>Close(false)"></button>
                </div>
                <div class="modal-body">
                    <p>Message</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" onclick="()=>Close(false)">لا</button>
                    <button class="btn btn-primary" onclick="()=>Close(true)">نعم</button>
                </div>
            </div>
        </div>
    </div>
 }

 @code {
     private bool IsVisible { get; set; }
     private string Message { get; set; } = "";

     protected override void OnInitialized()
     {
         PromptService.OnShowConfirmation += ShowDialog;
     }

     private async Task ShowDialog(string message)
     {
         Message = message;
         IsVisible = true;
         await InvokeAsync(StateHasChanged);
     }

     private void Close(bool result)
     {
         IsVisible = false;
         PromptService.SetResult(result);
         StateHasChanged();
     }

     public void Dispose()
     {
         PromptService.OnShowConfirmation -= ShowDialog;
     }
 }

 *@